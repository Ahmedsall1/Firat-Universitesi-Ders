# -*- coding: utf-8 -*-
"""EntegrasyonTesti.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D4MkBXsWjvCfRgnDhtu-vuLwAzeWxBJi
"""

# Öncelikle Flask'ı indirelim. Ardından hazır olarak verilen kodu kullanalım.


#Ardından terminalde (command) dosyaların olduğu klasöre gelerek app.py diyerek web dosyamızı açalım.
#cd "/Users/sulekaya/Downloads/2023/Yazılım Geçerleme ve Sınama/SuleKaya_Lab/4. Hafta Entegrasyon Testi Kodlar"
#app.py

#Ardından terminalden verilen adrese gidiyorum.  http://127.0.0.1:5000

"""**app.py** dosyasını Google Colab'a yükleyin ve içeriğini doğrudan okuyarak çalıştırın. Bu yöntem, dosyanızın içeriğini manuel olarak kopyalamadan çalıştırmamızı sağlar.

Flask uygulamanızı Google Colab'da çalıştırmak için **flask-ngrok** kütüphanesini kullanmanız gerekiyor. Bu kütüphane, Flask uygulamanızı dış dünyaya açmak için ngrok hizmetini kullanır.
"""



"""Flask uygulaması çalıştırıldığında, uygulama sürekli çalışır durumda kalır ve bu nedenle Google Colab'da diğer hücrelere geçiş yapamazsınız.

Bu sorunu çözmek için Flask uygulamasını bir arka plan işi olarak çalıştırmamız gerekiyor. Bu, **threading** **modülü** ile yapılabilir.

Aşağıda, Flask uygulamanızı bir arka plan işi olarak çalıştırmak için gereken kodları bulabilirsiniz:
"""

import threading
from flask_ngrok import run_with_ngrok

# Flask uygulamasını arka planda çalıştırmak için bir fonksiyon tanımlayalım
def run_flask():
    # Dosyanın içeriğini okuyalım
    with open('app.py', 'r') as file:
        app_content = file.read()

    # Flask uygulamasını ngrok ile çalıştırmak için aşağıdaki satırı ekleyelim
    app_content = app_content.replace("app.run(debug=True)",
                                      "run_with_ngrok(app)\napp.run()")

    # İçeriği exec() fonksiyonu ile çalıştıralım
    exec(app_content)

# Flask uygulamasını bir arka plan işi olarak başlatalım
thread = threading.Thread(target=run_flask)
thread.start()

"""Yukarıdaki kod Flask uygulamasını Google Colab'da çalıştırmak için tasarlanmıştır. Flask, normalde sadece yerel makinede çalışır, bu nedenle flask_ngrok kullanılarak dışa açılır. Bu kod, app.py dosyasını okur, içeriğini run_with_ngrok ile değiştirir ve Flask uygulamasını başlatır. Bu, Flask uygulamasını Colab'da çalıştırmanızı sağlar.

### ALTERNATİF YOL :

**app.py** dosyasının içeriğini doğrudan Google Colab hücresine kopyalayın ve çalıştırın. Bu yöntem, dosyayı yüklememize gerek kalmadan içeriği doğrudan Google Colab'da çalıştırmamıza olanak tanır.
"""



from flask import Flask, render_template, request, redirect, url_for, session
from flask_ngrok import run_with_ngrok

# [app.py içeriğini buraya yapıştırın]

run_with_ngrok(app)  # Flask uygulamasını ngrok üzerinden çalıştırır
app.run()

"""### Entegrasyon Testleri

Bu kodlar, Flask uygulamanızın farklı modüllerinin birlikte doğru bir şekilde çalışıp çalışmadığını kontrol eden entegrasyon testlerini tanımlar ve çalıştırır. Her bir test fonksiyonu (test_ ile başlayan fonksiyonlar), belirli bir entegrasyon testini gerçekleştirir ve sonuçları ***self.assertEqual fonksiyonu*** ile kontrol eder.
"""

from google.colab import drive
drive.mount('/content/drive')

"""Google Drive'dan belirtilen yollardaki dosyaları okuyarak içeriklerini app_code, index_code ve checkout_code değişkenlerine kaydediyor. Yani bu kod, Drive'daki dosyaların içeriğini okumak için kullanılır."""

# Dosyaların yollarını belirtelim
app_path = "/content/drive/MyDrive/Colab Notebooks/app.py"
index_path = "/content/drive/MyDrive/Colab Notebooks/templates/index.html"
checkout_path = "/content/drive/MyDrive/Colab Notebooks/templates/checkout.html"

# Dosyaları okuyalım
with open(app_path, 'r') as f:
    app_code = f.read()

with open(index_path, 'r') as f:
    index_code = f.read()

with open(checkout_path, 'r') as f:
    checkout_code = f.read()

"""Google Colab'ın çalışma ortamına bu dosyaları kaydediyor. Yani, Drive'dan okunan dosyaların içeriği, Colab'ın çalışma alanına app.py, index.html ve checkout.html olarak yazılıyor. Bu, daha sonra bu dosyaları Colab'da doğrudan kullanabilmeniz için gereklidir."""

#Şimdi bu dosyaları Google Colab ortamına kaydedelim:
with open('app.py', 'w') as f:
    f.write(app_code)

with open('index.html', 'w') as f:
    f.write(index_code)

with open('checkout.html', 'w') as f:
    f.write(checkout_code)

# Gerekli kütüphaneyi içe aktaralım.
import unittest

# Flask uygulamasını ve eklediğimiz modülleri içe aktaralım.
from app import app, sepet, urunler, StokModulu, IndirimModulu

# Entegrasyon testlerini tanımlayalım.
class EntegrasyonTestleri(unittest.TestCase):
    # Büyük-Büyük Entegrasyon Testi
    """ Bu test, genellikle tüm sistem üzerinde çalışır ve tüm modüllerin birlikte doğru bir şekilde çalışıp çalışmadığını kontrol eder.
Testte, bir ürünün sepete eklenmesi ve stok miktarının azaltılması işlemleri simüle edilir.
Sepete bir ürün ekledikten sonra, bu ürünün stok miktarının bir azaldığı doğrulanır."""

    def test_buyuk_buyuk_entegrasyon(self):
        # Stok modülünü başlatalım.
        stok_modulu = StokModulu()
        # Test edilecek ürünün ID'sini belirleyelim.
        urun_id = 1
        # Başlangıç stok miktarını alalım.
        baslangic_stok = stok_modulu.stok[urun_id]

        # Flask uygulamasının test istemcisini kullanarak sepete ekleme işlemini simüle edelim.
        with app.test_client() as istemci:
            istemci.get(f'/sepete_ekle/{urun_id}')
            stok_modulu.stok_azalt(urun_id, 1)

        # Stok miktarının doğru bir şekilde azaldığını kontrol edelim.
        self.assertEqual(stok_modulu.stok[urun_id], baslangic_stok - 1)

    # Artımlı Entegrasyon Testi
    """ Bu test, birbiriyle etkileşimde bulunan iki modülün birlikte doğru bir şekilde çalışıp çalışmadığını kontrol eder.
Testte, bir ürünün fiyatına indirim uygulanması işlemi simüle edilir.
İndirim uygulandıktan sonra, indirimli fiyatın doğru hesaplandığı doğrulanır."""

    def test_artimli_entegrasyon(self):
        # İndirim modülünü başlatalım.
        indirim_modulu = IndirimModulu()
        # Test edilecek ürünün ID'sini belirleyelim.
        urun_id = 1
        # Ürünün fiyatını alalım.
        urun_fiyat = next(u["fiyat"] for u in urunler if u["id"] == urun_id)

        # İndirim uygulayalım.
        indirimli_fiyat = indirim_modulu.indirim_uygula(urun_id, urun_fiyat)

        # İndirimli fiyatın doğru hesaplandığını kontrol edelim.
        self.assertEqual(indirimli_fiyat, urun_fiyat * 0.9)

    # Top-Down Entegrasyon Testi
    """Bu test, üstten aşağıya doğru modüllerin birlikte çalışıp çalışmadığını kontrol eder.
Testte, bir ürünün sepete eklenmesi, stok miktarının azaltılması ve indirim uygulanması işlemleri simüle edilir.
Sepete bir ürün ekledikten sonra, bu ürünün stok miktarının bir azaldığı ve indirimli fiyatın doğru hesaplandığı doğrulanır."""

    def test_ustten_asagi_entegrasyon(self):
        # Stok ve İndirim modüllerini başlatalım.
        stok_modulu = StokModulu()
        indirim_modulu = IndirimModulu()

        # Test edilecek ürünün ID'sini belirleyelim.
        urun_id = 1
        # Başlangıç stok miktarını alalım.
        baslangic_stok = stok_modulu.stok[urun_id]

        # Flask uygulamasının test istemcisini kullanarak sepete ekleme işlemini simüle edelim.
        with app.test_client() as istemci:
            istemci.get(f'/sepete_ekle/{urun_id}')
            stok_modulu.stok_azalt(urun_id, 1)

        # Ürünün fiyatını alalım.
        urun_fiyat = next(u["fiyat"] for u in urunler if u["id"] == urun_id)
        # İndirim uygulayalım.
        indirimli_fiyat = indirim_modulu.indirim_uygula(urun_id, urun_fiyat)

        # Stok miktarının ve indirimli fiyatın doğru hesaplandığını kontrol edelim.
        self.assertEqual(stok_modulu.stok[urun_id], baslangic_stok - 1)
        self.assertEqual(indirimli_fiyat, urun_fiyat * 0.9)

# Testleri çalıştıralım.
if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

""""OK" ifadesi, tüm testlerin başarılı bir şekilde geçtiğini belirtir. Ayrıca, her bir testin yanında "ok" ifadesi de bu testin başarılı olduğunu gösterir."""