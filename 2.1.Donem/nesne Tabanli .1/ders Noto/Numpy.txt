import numpy as np


1.

arr = np.array([1, 2, 3, 4, 5, 6, 7])

print(arr[1:5])

output=>
[2 3 4 5]
------------------------------------------------------------------------------------------------------------
2. 
arr = np.array([1, 2, 3, 4, 5, 6, 7])

print(arr[-3:-1])
output=>
[5 6]
------------------------------------------------------------------------------------------------------------
3.
arr = np.array([1, 2, 3, 4, 5, 6, 7])

print(arr[1:5:2])

output=>
[2 4]
------------------------------------------------------------------------------------------------------------
4.
arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])

print(arr[0:2, 1:4])

output=>
[[2 3 4]
 [7 8 9]]
------------------------------------------------------------------------------------------------------------
i - integer
b - boolean
u - unsigned integer
f - float
c - complex float
m - timedelta
M - datetime
O - object
S - string
U - unicode string
V - fixed chunk of memory for other type ( void )
output=>
------------------------------------------------------------------------------------------------------------
5.
import numpy as np

arr = np.array([1, 2, 3, 4])

print(arr.dtype)

output=>
int64
------------------------------------------------------------------------------------------------------------
6.
import numpy as np

arr = np.array(['apple', 'banana', 'cherry'])

print(arr.dtype)

output=>
<U6
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
6.
arr = np.array([1, 2, 3, 4], dtype='i4')

print(arr)
print(arr.dtype)

output=>
[1 2 3 4]
int32
------------------------------------------------------------------------------------------------------------
7.		Change data type from float to integer
arr = np.array([1.1, 2.1, 3.1])

newarr = arr.astype('i')

print(newarr)
print(newarr.dtype)

output=>
[1 2 3]
int32
------------------------------------------------------------------------------------------------------------
8.
arr = np.array([1, 2, 3, 4, 5])
x = arr.copy()
arr[0] = 42

print(arr)
print(x)

output=>
[42  2  3  4  5]
[1 2 3 4 5]
------------------------------------------------------------------------------------------------------------
9.
arr = np.array([1, 2, 3, 4, 5])

x = arr.copy()
y = arr.view()

print(x.base)
print(y.base)


output=>
None
[1 2 3 4 5]
------------------------------------------------------------------------------------------------------------
10.
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])

print(arr.shape)

output=>
(2, 4)
------------------------------------------------------------------------------------------------------------
11.
arr = np.array([1, 2, 3, 4], ndmin=5)

print(arr)
print('shape of array :', arr.shape)

output=>
[[[[[1 2 3 4]]]]]
shape of array : (1, 1, 1, 1, 4)
------------------------------------------------------------------------------------------------------------
12.
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])

newarr = arr.reshape(4, 3)

print(newarr)

output=>
[[ 1  2  3]
 [ 4  5  6]
 [ 7  8  9]
 [10 11 12]]
------------------------------------------------------------------------------------------------------------
13.
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])

newarr = arr.reshape(2, 2, -1)

print(newarr)

output=>
[[[1 2]
  [3 4]]

 [[5 6]
  [7 8]]]
------------------------------------------------------------------------------------------------------------
14.
arr = np.array([[1, 2, 3], [4, 5, 6]])

for x in arr:
  for y in x:
    print(y)

output=>
1
2
3
4
5
6
------------------------------------------------------------------------------------------------------------
15.
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

for x in arr:
  for y in x:
    for z in y:
      print(z)

output=>
1
2
3
4
5
6
7
8
9
10
11
12
------------------------------------------------------------------------------------------------------------
16.
arr1 = np.array([[1, 2], [3, 4]])

arr2 = np.array([[5, 6], [7, 8]])

arr = np.concatenate((arr1, arr2), axis=1)

print(arr)

output=>
[[1 2 5 6]
 [3 4 7 8]]
------------------------------------------------------------------------------------------------------------
17.
arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])

arr = np.dstack((arr1, arr2))

print(arr)

output=>
[[[1 4]
  [2 5]
  [3 6]]]
------------------------------------------------------------------------------------------------------------
18.
arr = np.array([1, 2, 3, 4, 5, 6])

newarr = np.array_split(arr, 3)

print(newarr)


output=>
[array([1, 2]), array([3, 4]), array([5, 6])]
------------------------------------------------------------------------------------------------------------
19.
arr = np.array([1, 2, 3, 4, 5, 6])

newarr = np.array_split(arr, 3)

print(newarr[0])
print(newarr[1])
print(newarr[2])

output=>
[1 2]
[3 4]
[5 6]
------------------------------------------------------------------------------------------------------------
20.
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])

newarr = np.array_split(arr, 3)

print(newarr)

output=>
[array([[1, 2, 3],
       [4, 5, 6]]), array([[ 7,  8,  9],
       [10, 11, 12]]), array([[13, 14, 15],
       [16, 17, 18]])]
------------------------------------------------------------------------------------------------------------
21.
arr = np.array([1, 2, 3, 4, 5, 4, 4])

x = np.where(arr == 4)

print(x)

output=>
(array([3, 5, 6]),)
------------------------------------------------------------------------------------------------------------
22.
arr = np.array([6, 7, 8, 9])

x = np.searchsorted(arr, 7, side='right')

print(x)
output=>
2
------------------------------------------------------------------------------------------------------------
23.
arr = np.array([1, 3, 5, 7])

x = np.searchsorted(arr, [2, 4, 6])

print(x)

output=>
[1 2 3]
------------------------------------------------------------------------------------------------------------
24.	يمكنك أيضًا فرز مصفوفات السلاسل أو أي نوع بيانات آخر:
arr = np.array(['banana', 'cherry', 'apple'])

print(np.sort(arr))
output=>
['apple' 'banana' 'cherry']
------------------------------------------------------------------------------------------------------------
25.
arr = np.array([True, False, True])

print(np.sort(arr))

output=>
[False True True]
------------------------------------------------------------------------------------------------------------
26.
arr = np.array([41, 42, 43, 44])

x = arr[[True, False, True, False]]

print(x)
output=>
[41 43]
------------------------------------------------------------------------------------------------------------
27.
arr = np.array([41, 42, 43, 44])


# إنشاء قائمة فارغة
filter_arr = []

for element in arr:
# إذا كان العنصر أعلى من 42 ، فاضبط القيمة على True ، وإلا خطأ:
  if element > 42:
    filter_arr.append(True)
  else:
    filter_arr.append(False)

newarr = arr[filter_arr]

print(filter_arr)
print(newarr)
output=>
[False, False, True, True]
[43 44]
------------------------------------------------------------------------------------------------------------
28.
arr = np.array([1, 2, 3, 4, 5, 6, 7])

# Create an empty list
filter_arr = []

# go through each element in arr
for element in arr:
  # if the element is completely divisble by 2, set the value to True, otherwise False
  if element % 2 == 0:
    filter_arr.append(True)
  else:
    filter_arr.append(False)

newarr = arr[filter_arr]

print(filter_arr)
print(newarr)

output=>
[False, True, False, True, False, True, False]
[2 4 6]
------------------------------------------------------------------------------------------------------------
29.
arr = np.array([41, 42, 43, 44])

filter_arr = arr > 42

newarr = arr[filter_arr]

print(filter_arr)
print(newarr)

output=>
[False False  True  True]
[43 44]
------------------------------------------------------------------------------------------------------------
30.
from numpy import random

x=random.randint(100, size=(5))

print(x)

output=>
[50 78 96 20 50]
------------------------------------------------------------------------------------------------------------
31.
from numpy import random

x = random.rand(3, 5)

print(x)

output=>
[[0.03379952 0.78263517 0.9834899  0.47851523 0.02948659] 
 [0.36284007 0.10740884 0.58485016 0.20708396 0.00969559] 
 [0.88232193 0.86068608 0.75548749 0.61233486 0.06325663]]
------------------------------------------------------------------------------------------------------------
32.
from numpy import random

x = random.choice([3, 5, 7, 9])

print(x)

output=>
9
------------------------------------------------------------------------------------------------------------
33.
from numpy import random

x = random.choice([3, 5, 7, 9], p=[0.1, 0.3, 0.6, 0.0], size=(100))

print(x)

output=>
[7 7 7 7 7 5 7 7 3 7 7 5 3 7 7 7 7 7 7 7 5 5 5 7 7 7 7 7 7 7 7 5 7 5 7 5 7
 7 7 5 5 7 5 7 7 7 3 3 7 3 7 3 7 3 7 7 7 5 7 7 5 5 5 5 5 7 7 7 7 7 7 7 7 7
 7 7 5 7 5 7 7 7 5 5 5 5 5 5 7 7 5 7 5 7 3 7 7 7 3 7]
------------------------------------------------------------------------------------------------------------
34.
from numpy import random
import numpy as np

arr = np.array([1, 2, 3, 4, 5])

random.shuffle(arr)

print(arr)
output=>
[2 1 4 5 3]
------------------------------------------------------------------------------------------------------------
35.
from numpy import random

x = random.poisson(lam=2, size=10)

print(x)

output=>
[1 2 1 6 3 3 3 0 1 1]
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------

output=>
------------------------------------------------------------------------------------------------------------
output=>
------------------------------------------------------------------------------------------------------------
output=>